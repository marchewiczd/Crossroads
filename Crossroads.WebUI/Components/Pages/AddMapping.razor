@page "/add-mapping"

@using Crossroads.Utils.Data
@using Crossroads.WebUI.Services

@inject IContainerService CustomerService
@inject IJSRuntime JsRuntime

<PageTitle>Crossroads - Add mapping</PageTitle>

<h1>Add new container name mapping</h1>

<br>
<EditForm id="create-customer-form" EditContext="_editContext" OnValidSubmit="@HandleValidSubmit">
    <div class="form-group">
        <label for="description">Description</label>
        <InputText id="description" placeholder="Description" class="form-control" @bind-Value="_mapping.Description"/>
    </div>
    <br>
    <div class="form-group">
        <label for="containerName">Container Name</label>
        <InputText id="containerName" placeholder="ContainerName" class="form-control" @bind-Value="_mapping.ContainerName"/>
    </div>
    <br>
    <button type="submit" @onclick="ResetValidation" class="btn btn-primary">Submit</button>
</EditForm>

@if (_mappingCreated)
{
    <br>
    <h3>Mapping @(_mapping.Description) for @(_mapping.ContainerName) has been created!</h3>
}


@code {

    private readonly DockerNameMappingDto _mapping = new();
    private EditContext? _editContext;
    private ValidationMessageStore? _messageStore;
    
    private bool _mappingCreated;
    
    protected override void OnInitialized()
    {
        _editContext = new EditContext(_mapping);
        _messageStore = new ValidationMessageStore(_editContext);
    }
    
    private async Task HandleValidSubmit()
    {
        _mappingCreated = await CustomerService.CreateMapping(_mapping);
        if (!_mappingCreated)
        {
            await JsRuntime.InvokeVoidAsync(
                "window.alert",
                "Mapping was not created due to duplicate values.");
        }
    }

    private void ResetValidation()
    {
        if (!_editContext!.IsModified()) 
            return;
        
        _messageStore?.Clear();
        _editContext = new EditContext(_mapping);
        _messageStore = new ValidationMessageStore(_editContext);
    }

}
